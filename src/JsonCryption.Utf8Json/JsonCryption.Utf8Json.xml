<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonCryption.Utf8Json</name>
    </assembly>
    <members>
        <member name="T:JsonCryption.Utf8Json.EncryptAttribute">
            <summary>
            Decorate fields and properties to encrypt/decrypt when serializing/deserializing
            
            class Foo
            {
                [Encrypt]
                private string _myPrivateEncryptedField;
            }
            </summary>
        </member>
        <member name="T:JsonCryption.Utf8Json.EncryptedResolver">
            <summary>
            Set to <see cref="T:Utf8Json.JsonSerializer"/>'s default resolver to get built-in field-level encryption
            of fields and properties marked with the <see cref="T:JsonCryption.Utf8Json.EncryptAttribute"/>:
            
            // configure
            IDataProtectionProvider dataProtectionProvider = ...
            var resolver = new EncryptedResolver(StandardResolver.AllowPrivate, dataProtectionProvider);
            JsonSerializer.SetDefaultResolver(resolver);
            
            // set up class
            class Foo
            {
                [Encrypt]
                public int MyInt { get; set; }
            }
            
            // serialize/deserialize
            var instance = new Foo { MyInt = 75 };
            JsonSerializer.Serialize(instance);
            
            </summary>
        </member>
        <member name="M:JsonCryption.Utf8Json.EncryptedResolver.#ctor(Utf8Json.IJsonFormatterResolver,Microsoft.AspNetCore.DataProtection.IDataProtector)">
            <summary>
            Creates a new <see cref="T:JsonCryption.Utf8Json.EncryptedResolver"/> with a given fallback default <see cref="T:Utf8Json.IJsonFormatterResolver"/>
            and an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector"/>
            </summary>
            <param name="fallbackResolver">Used to serialize properties that do not need encryption</param>
            <param name="dataProtector"></param>
        </member>
        <member name="M:JsonCryption.Utf8Json.EncryptedResolver.GetFormatter``1">
            <summary>
            Resolves an encryption-ready <see cref="T:Utf8Json.IJsonFormatter`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
    </members>
</doc>
